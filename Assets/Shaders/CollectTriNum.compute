#include "SPHInclude.compute"
#pragma kernel CollectTriNum

StructuredBuffer<float> _Samples;
StructuredBuffer<int> _CornerToTriNumTable;

RWBuffer<uint> _TriNum;
RWBuffer<uint> _CornerFlags;

void FillCube(int blockIdx, uint3 cellIdx, out float cube[8])
{
	uint start = blockIdx * SAMPLE_SIZE_3D + cellIdx.x + cellIdx.y * SAMPLE_SIZE + cellIdx.z * SAMPLE_SIZE_2D;

	//low
	cube[0] = _Samples[start];
	cube[1] = _Samples[start + 1];
	cube[2] = _Samples[start + 1 + SAMPLE_SIZE];
	cube[3] = _Samples[start + SAMPLE_SIZE];

	//up
	cube[4] = _Samples[start + SAMPLE_SIZE_2D];
	cube[5] = _Samples[start + 1 + SAMPLE_SIZE_2D];
	cube[6] = _Samples[start + 1 + SAMPLE_SIZE + SAMPLE_SIZE_2D];
	cube[7] = _Samples[start + SAMPLE_SIZE + SAMPLE_SIZE_2D];
}


[numthreads(BLOCK_SIZE,BLOCK_SIZE,BLOCK_SIZE)]
void CollectTriNum (uint3 cellIdx : SV_GroupThreadID, uint3 groupId :SV_GroupID)
{
	uint blockIdx = groupId.x;
	float cube[8];
	FillCube(blockIdx, cellIdx, cube);

	int cornerFlag = 0;
	[unroll]
	for(int i = 0; i < 8; i++)
		if(cube[i] > 0)
			cornerFlag = cornerFlag | (1 << i);

	int cellTriNum = _CornerToTriNumTable[cornerFlag];
	InterlockedAdd(_TriNum[0],cellTriNum);

	_CornerFlags
	[
		blockIdx * BLOCK_SIZE_3D +
		cellIdx.x +
		cellIdx.y * BLOCK_SIZE +
		cellIdx.z * BLOCK_SIZE_2D
	] = cornerFlag;

}
