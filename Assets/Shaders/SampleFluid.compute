#include "SPHInclude.compute"
#pragma kernel CollectSurfaceBlock
#pragma kernel SampleFluid

//Input
StructuredBuffer<uint3> _Blocks;
StructuredBuffer<uint> _ParticleCellNumPrefixSum;
StructuredBuffer<Particle> _Particles;

//Output
RWBuffer<uint> _SurfaceMCBlocks; //[MC Block Num 3D]
RWBuffer<float> _Samples;
RWStructuredBuffer<float3> _Normals;

[numthreads(SPH_THREAD_NUM,SPH_THREAD_NUM,SPH_THREAD_NUM)]
void CollectSurfaceBlock (uint groupIdx : SV_GroupIndex, uint3 groupId :SV_GroupID)
{
	uint flatIdx = groupIdx + groupId.x * SPH_THREAD_NUM_3D;
	//dirty fix here...
	if((flatIdx < _ParticleNum)/* && _Particles[flatIdx]._onSurface == 1*/)
	{	
		uint3 low = floor((_Particles[flatIdx]._position - float3(_KernelRadius, _KernelRadius, _KernelRadius)) /
					(_MCVoxelScale * BLOCK_SIZE));
		uint3 up = floor((_Particles[flatIdx]._position + float3(_KernelRadius, _KernelRadius, _KernelRadius)) / 
					(_MCVoxelScale * BLOCK_SIZE));
		uint x, y, z;
		for(x = low.x; x <= up.x; ++x)
			for(y = low.y; y <= up.y; ++y)
				for(z = low.z; z <= up.z; ++z)
					{
						uint blockIdx1d = x * _MCEngineDim.y * _MCEngineDim.z + 
											y * _MCEngineDim.z + z;
						InterlockedOr(_SurfaceMCBlocks[blockIdx1d], 1);
					}	
	}
}


[numthreads(SAMPLE_SIZE,SAMPLE_SIZE,SAMPLE_SIZE)] // NOTICE use SAMPLE_SIZE here
void SampleFluid  (uint3 cellIdx : SV_GroupThreadID, uint3 groupId :SV_GroupID)
{
	uint blockIdx = groupId.x;

	uint outputIdx = blockIdx * SAMPLE_SIZE_3D +
					 cellIdx.x +
					 cellIdx.y * SAMPLE_SIZE +
					 cellIdx.z * SAMPLE_SIZE_2D;

	//compute world position for each MC sample cell
	 float3 worldPos = float3
	((float)(_Blocks[blockIdx].x * BLOCK_SIZE + cellIdx.x),
	 (float)(_Blocks[blockIdx].y * BLOCK_SIZE + cellIdx.y),
	 (float)(_Blocks[blockIdx].z * BLOCK_SIZE + cellIdx.z));

	worldPos *= _MCVoxelScale;
	uint3 cellWorldIdx = floor(worldPos * _inv_KernelRadius);
	
	//find neighbor space
	uint neighbor[27];
	uint i = 0;
	for(i = 0; i < 27; ++i)
		neighbor[i] = 0;
	FindNeighborSpace(cellWorldIdx, neighbor);

	_Samples[outputIdx] = 0;
	_Normals[outputIdx] = float3(0, 0, 0);

	[unroll]
	for(i = 0; i < 27; ++i)
	{
		if(neighbor[i] != 0)
		{
			//get particles from each neighbor SPH grid cell
			uint3 neighborIdx = cellWorldIdx + neighborOffset[i];
			uint neighborIdx1d = neighborIdx.x * _SphGridSize.y * _SphGridSize.z +
								 neighborIdx.y * _SphGridSize.z + 
								 neighborIdx.z;
			uint start = _ParticleCellNumPrefixSum[neighborIdx1d];
			uint end = _ParticleCellNumPrefixSum[neighborIdx1d + 1]; //last element? -> one more element
			for(uint n = start; n < end; ++n)
			{
				_Samples[outputIdx] += _Particles[n]._mass * _Particles[n]._inv_density * KernelPoly6(worldPos - _Particles[n]._position);
				_Normals[outputIdx] += _Particles[n]._mass * _Particles[n]._inv_density * GradKernelPoly6(worldPos - _Particles[n]._position);
			}
		}
	}
	
	if (_Samples[outputIdx] > 0)
    {
		_Samples[outputIdx] -= _SurfaceThreshold;
		_Normals[outputIdx] = normalize(_Normals[outputIdx]);
        _Normals[outputIdx] *= -1;
    }
     else
		_Samples[outputIdx] = -_SurfaceThreshold;
}
