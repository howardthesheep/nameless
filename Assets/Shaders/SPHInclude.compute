#ifndef SPH_INCLUDE
#define SPH_INCLUDE

/*** SPH Size ***/
#define SPH_THREAD_NUM 8
#define SPH_THREAD_NUM_2D 64
#define SPH_THREAD_NUM_3D 512

/*** Cell Start Index Reduction Size ***/
#define CELL_SCAN_THREAD_NUM 8
#define CELL_SCAN_THREAD_NUM_2D 64
#define CELL_SCAN_THREAD_NUM_3D 512
#define LOG2_CELL_SCAN_THREAD_NUM_3D 9

/*** Marching Cube Size ***/
#define BLOCK_SIZE 8
#define BLOCK_SIZE_2D 64
#define BLOCK_SIZE_3D 512
#define SAMPLE_SIZE 9
#define SAMPLE_SIZE_2D 81
#define SAMPLE_SIZE_3D 729

struct Triangle
{
	float3 _position0;
	float3 _position1;
	float3 _position2;
	float3 _normal0;
	float3 _normal1;
	float3 _normal2;
	int _block;
};

struct Particle
{
	float _mass;
	float _inv_density;
	float3 _position;
	float3 _velocity;
	uint _onSurface;
	float3 _midVelocity;
    float3 _prevVelocity;
    float _pressure;
    float3 _forcePressure;
    float3 _forceViscosity;
    float3 _forceTension;
	float3 _colorGradient;
	uint _cellIdx1d;
};

struct Sphere
{
	float3 _center;
	float _radius;
	float3 _velocity;
	int _active;
};

//(x+1) + 3(y+1) + 9(z+1)
static int3 neighborOffset[27] =
{
	int3(-1,-1,-1), int3(0,-1,-1), int3(1,-1,-1), 
	int3(-1,0,-1), int3(0,0,-1), int3(1,0,-1), 
	int3(-1,1,-1), int3(0,1,-1), int3(1,1,-1), 

	int3(-1,-1,0), int3(0,-1,0), int3(1,-1,0), 
	int3(-1,0,0), int3(0,0,0), int3(1,0,0), 
	int3(-1,1,0), int3(0,1,0), int3(1,1,0), 

	int3(-1,-1,1), int3(0,-1,1), int3(1,-1,1), 
	int3(-1,0,1), int3(0,0,1), int3(1,0,1), 
	int3(-1,1,1), int3(0,1,1), int3(1,1,1), 
};

//SPH solver params -- SET ME!!!!!
uniform uint _ParticleNum;
uniform float _TimeStep;
uniform uint3 _SphGridSize;
uniform float _KernelRadius;

uniform float _inv_KernelRadius;
uniform float _kr2;
uniform float _inv_kr3;
uniform float _inv_kr6;
uniform float _inv_kr9;

uniform float _Stiffness;
uniform float _RestDensity;
uniform float3 _ExternalAcc;
uniform float _Viscosity;
uniform float _TensionCoef;
uniform float _SurfaceThreshold;
uniform float _Eps;

//MC Engine params -- SET ME!!!!!
uniform uint3 _MCEngineDim;
uniform float _MCVoxelScale;

//SPH Const
#define kPoly6Const (1.566681471061)
#define gradKPoly6Const (-9.4000888264)
#define lapKPoly6Const (-9.4000888264)
#define kSpikyConst (4.774648292757)
#define gradKSpikyConst (-14.3239448783)
#define kViscosityConst (2.387324146378)
#define lapkViscosityConst (14.3239448783)

void FindNeighborSpace(uint3 idx, out uint neighbor[27])
{
	//for(uint p = 0; p < 27; ++p)
	//	neighbor[p] = false;
	 
	 //x + 3y + 9z
	 neighbor[13] = 1;

	 if (idx.x > 0) // (0, 1, 1) -> 12
		neighbor[12] = 1;
	 if (idx.y > 0) // (1, 0, 1) ->10
		neighbor[10] = 1;
     if (idx.z > 0) // (1, 1, 0) -> 4
        neighbor[4] = 1;

     if (idx.x < _SphGridSize.x - 1) // (2, 1, 1) -> 14
        neighbor[14] = 1;
     if (idx.y < _SphGridSize.y - 1) // (1, 2, 1) -> 16
        neighbor[16] = 1;
     if (idx.z < _SphGridSize.z - 1) // (1, 1, 2) -> 22
        neighbor[22] = 1;

     if (idx.x > 0 && idx.y > 0) // (0, 0, 1) -> 9
        neighbor[9] = 1;

     if (idx.y > 0 && idx.z > 0) // (1, 0, 0) -> 1
        neighbor[1] = 1;

     if (idx.x > 0 && idx.z > 0) // (0, 1, 0) -> 3
        neighbor[3] = 1;

     if (idx.x < _SphGridSize.x - 1 && idx.y < _SphGridSize.y - 1) // (2, 2, 1) -> 17
        neighbor[17] = 1;

     if (idx.y < _SphGridSize.y - 1 && idx.z < _SphGridSize.z - 1) // (1, 2, 2) -> 25
        neighbor[25] = 1;

	 if (idx.x < _SphGridSize.x - 1 && idx.z < _SphGridSize.z - 1) // (2, 1, 2) -> 23
        neighbor[23] = 1;

     if (idx.x > 0 && idx.y < _SphGridSize.y - 1) // (0, 2, 1) -> 15
        neighbor[15] = 1;

     if (idx.y > 0 && idx.z < _SphGridSize.z - 1) // (1, 0, 2) -> 19
        neighbor[19] = 1;

     if (idx.x > 0 && idx.z < _SphGridSize.z - 1) // (0, 1, 2) -> 21
        neighbor[21] = 1;

     if (idx.x < _SphGridSize.x - 1 && idx.y > 0) // (2, 0, 1) -> 11
        neighbor[11] = 1;
     if (idx.y < _SphGridSize.y - 1 && idx.z > 0) // (1, 2, 0) -> 7
        neighbor[7] = 1;
     if (idx.x < _SphGridSize.x - 1 && idx.z > 0) // (2, 1, 0) -> 5
        neighbor[5] = 1;
     if (idx.x > 0 && idx.y > 0 && idx.z > 0) // (0, 0, 0) -> 0
         neighbor[0] = 1;

     if (idx.x < _SphGridSize.x - 1 && idx.y > 0 && idx.z > 0) // (2, 0, 0) -> 2
        neighbor[2] = 1;
     if (idx.x > 0 && idx.y < _SphGridSize.y - 1 && idx.z > 0) // (0, 2, 0) -> 6
        neighbor[6] = 1;
     if (idx.x > 0 && idx.y > 0 && idx.z < _SphGridSize.z - 1) // (0, 0, 2) -> 18
        neighbor[18] = 1;

     if (idx.x < _SphGridSize.x - 1 && idx.y < _SphGridSize.y - 1 && idx.z > 0) // (2, 2, 0) -> 8
         neighbor[8] = 1; 
	 if (idx.x > 0 && idx.y < _SphGridSize.y - 1 && idx.z < _SphGridSize.z - 1) // (0, 2, 2) -> 24
         neighbor[24] = 1;
	 if (idx.x < _SphGridSize.x - 1 && idx.y > 0 && idx.z < _SphGridSize.z - 1) // (2, 0, 2) -> 20
         neighbor[20] = 1;
    
	 if (idx.x < _SphGridSize.x - 1 && idx.y < _SphGridSize.y - 1 && idx.z < _SphGridSize.z - 1) // (2, 2, 2) -> 26
         neighbor[26] = 1;
}

inline float KernelPoly6(float3 r)
{
	float sqrDiff = (_kr2 - dot(r, r));
    if (sqrDiff < 0)
		return 0;
    return kPoly6Const * _inv_kr9 * sqrDiff * sqrDiff * sqrDiff;
}

inline float3 GradKernelPoly6(float3 r)
{
	float sqrDiff = (_kr2 - dot(r,r));
    if (sqrDiff < 0)
		return float3(0, 0, 0);
	return gradKPoly6Const * _inv_kr9 * sqrDiff * sqrDiff * r;
}

inline float LaplacianKernelPoly6(float3 r)
{
	float r2 = dot(r, r);
	float sqrDiff = (_kr2 - r2);
	if (sqrDiff < 0)
		return 0;
    return lapKPoly6Const * _inv_kr9 * sqrDiff * (3 * _kr2 - 7 * r2);
}

inline float KernelSpiky(float3 r)
{
	float diff = _KernelRadius - length(r);
    if (diff < 0)
		return 0;
    return kSpikyConst * _inv_kr6 * diff * diff * diff;
}

inline float3 GradKernelSpiky(float3 r)
{
    float mag = length(r);
    float diff = (_KernelRadius - mag);
    if (diff < 0 || mag <= 0)
        return float3(0, 0, 0);
    r *= (1 / mag);
    return gradKSpikyConst * _inv_kr6 * diff * diff * r;
}

inline float KernelViscosity(float3 r)
{
    float mag = length(r);
    if (_KernelRadius - mag < 0)
        return 0;
    float sqrMag = mag * mag;
    return kViscosityConst * _inv_kr3 * (-0.5 * mag * sqrMag * _inv_kr3 + sqrMag / (_kr2) + 0.5 * _KernelRadius / mag - 1);
}

inline float LaplacianKernelViscosity(float3 r)
{
	float mag = length(r);
    float diff = _KernelRadius - mag;
    if (diff < 0 || mag <= 0)
        return 0;
    return lapkViscosityConst * _inv_kr6 * diff;
}

inline void ApplyGridBoundaryCondition(inout Particle particle)
{
	int3 cellIdx = floor(particle._position * _inv_KernelRadius);
    bool collision = false;
    float3 contact = particle._position;
    float3 contactNormal = float3(0, 0, 0);
    if (cellIdx.x < 0)
    {
        collision = true;
        contact.x = _Eps;
        contactNormal.x -= 1;
    }
    if (cellIdx.x >= (int)_SphGridSize.x)
    {
        collision = true;
        contact.x = _SphGridSize.x * _KernelRadius - _Eps;
        contactNormal.x += 1;
    }
    if (cellIdx.y < 0)
    {
        collision = true;
        contact.y = _Eps;
        contactNormal.y -= 1;
    }
    if (cellIdx.y >= (int)_SphGridSize.y)
    {
        collision = true;
        contact.y = _SphGridSize.y * _KernelRadius - _Eps;
        contactNormal.y += 1;
    }
    if (cellIdx.z < 0)
    {
        collision = true;
        contact.z = _Eps;
        contactNormal.z -= 1;
    }
    if (cellIdx.z >= (int)_SphGridSize.z)
    {
        collision = true;
        contact.z = _SphGridSize.z * _KernelRadius - _Eps;
        contactNormal.z += 1;
    }

    if (collision)
    {
        contactNormal = normalize(contactNormal);
        float3 proj = dot(particle._midVelocity, contactNormal) * contactNormal;
        particle._position = contact;
        particle._velocity -= (1 + 0.5) * proj;
        particle._midVelocity = 0.5 * (particle._velocity + particle._prevVelocity);
    }
}

#endif