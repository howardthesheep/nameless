#include "SPHInclude.compute"

#pragma kernel ComputeCellIdx
#pragma kernel ScanCellNumLocal
#pragma kernel ScanCellNumGlobal
#pragma kernel FindNeighborSpace
#pragma kernel UpdatePressureDensity
#pragma kernel UpdateParticleFluidForce
#pragma kernel AdvanceParticle
#pragma kernel InitParticle

//Input
StructuredBuffer<Sphere> _Obstacles;

//Updating
groupshared uint groupCellPrefixSum[CELL_SCAN_THREAD_NUM_3D];
RWStructuredBuffer<uint> _ParticleCellNumPrefixSum;
RWBuffer<uint> _ParticlePrefixLocalOffset; //[ceil(_SphGridSize_3D / CELL_SCAN_THREAD_NUM_3D)]
RWStructuredBuffer<Particle> _Particles;
RWStructuredBuffer<uint> _NeighborSpace;

[numthreads(SPH_THREAD_NUM,SPH_THREAD_NUM,SPH_THREAD_NUM)]
void ComputeCellIdx (uint groupIdx : SV_GroupIndex, uint3 groupId :SV_GroupID)
{
	uint flatIdx = groupIdx + groupId.x * SPH_THREAD_NUM_3D;
	if(flatIdx >= _ParticleNum)
		return;

	uint3 cellIdx = floor(_Particles[flatIdx]._position * _inv_KernelRadius);
	_Particles[flatIdx]._cellIdx1d = cellIdx.x * _SphGridSize.y * _SphGridSize.z +
					 cellIdx.y * _SphGridSize.z + 
					 cellIdx.z;
	
	InterlockedAdd(_ParticleCellNumPrefixSum[_Particles[flatIdx]._cellIdx1d],1);
}

[numthreads(CELL_SCAN_THREAD_NUM,CELL_SCAN_THREAD_NUM,CELL_SCAN_THREAD_NUM)]
void ScanCellNumLocal (uint groupIdx : SV_GroupIndex, uint3 groupId :SV_GroupID)
{
	//group number: ceil(_SphGridSize_3D / CELL_SCAN_THREAD_NUM_3D)
	uint flatIdx = groupIdx + groupId.x * CELL_SCAN_THREAD_NUM_3D;
	uint sphGridCellNum = _SphGridSize.x * _SphGridSize.y * _SphGridSize.z;
	if(flatIdx < sphGridCellNum)
		groupCellPrefixSum[groupIdx] = _ParticleCellNumPrefixSum[flatIdx];
	else
		groupCellPrefixSum[groupIdx] = 0;
	GroupMemoryBarrierWithGroupSync();
	
	//parallel scan: up-sweep
	int d = 0;
	[unroll]
	for(d = 0; d < LOG2_CELL_SCAN_THREAD_NUM_3D; ++d)
	{
		uint pow_2_d_1 = 1 << (d + 1);
		if((groupIdx % pow_2_d_1) == 0)
		{
			groupCellPrefixSum[groupIdx + pow_2_d_1 - 1] +=
			groupCellPrefixSum[groupIdx + (1 << d) - 1];
		}
		GroupMemoryBarrierWithGroupSync();
	}

	//parallel scan: set last element to zero
	if(groupIdx == CELL_SCAN_THREAD_NUM_3D - 1)
	{
		_ParticlePrefixLocalOffset[groupId.x] = groupCellPrefixSum[groupIdx];
		groupCellPrefixSum[groupIdx] = 0;	
	}
	GroupMemoryBarrierWithGroupSync();

	//parallel scan: down-sweep
	[unroll]
	for(d = LOG2_CELL_SCAN_THREAD_NUM_3D - 1; d >= 0; --d)
	{
		uint pow_2_d_1 = 1 << (d + 1);
		uint pow_2_d = (1 << d);
		if((groupIdx % pow_2_d_1) == 0)
		{
			uint old = groupCellPrefixSum[groupIdx + pow_2_d - 1];
			groupCellPrefixSum[groupIdx + pow_2_d - 1] = 
			groupCellPrefixSum[groupIdx + pow_2_d_1 - 1];
			groupCellPrefixSum[groupIdx + pow_2_d_1 - 1] += old;
		}
		GroupMemoryBarrierWithGroupSync();
	}

	//write back to global
	if(flatIdx < sphGridCellNum)
		 _ParticleCellNumPrefixSum[flatIdx] = groupCellPrefixSum[groupIdx];
}

[numthreads(CELL_SCAN_THREAD_NUM,CELL_SCAN_THREAD_NUM,CELL_SCAN_THREAD_NUM)]
void ScanCellNumGlobal (uint groupIdx : SV_GroupIndex, uint3 groupId :SV_GroupID)
{
	//group number: ceil(_SphGridSize_3D / CELL_SCAN_THREAD_NUM_3D)
	uint groupOffset = 0;
	for(uint i = 0; i < groupId.x; ++i)
		groupOffset += _ParticlePrefixLocalOffset[i];
	uint flatIdx = groupIdx + groupId.x * CELL_SCAN_THREAD_NUM_3D;
	uint sphGridCellNum = _SphGridSize.x * _SphGridSize.y * _SphGridSize.z;
	if(flatIdx < sphGridCellNum)
		_ParticleCellNumPrefixSum[flatIdx] += groupOffset;
	else if(flatIdx == sphGridCellNum)
		_ParticleCellNumPrefixSum[flatIdx] = _ParticleNum;
}


[numthreads(SPH_THREAD_NUM,SPH_THREAD_NUM,SPH_THREAD_NUM)]
void FindNeighborSpace (uint groupIdx : SV_GroupIndex, uint3 groupId :SV_GroupID)
{	
	uint flatIdx = groupIdx + groupId.x * SPH_THREAD_NUM_3D;
	if(flatIdx >= _ParticleNum)
		return;

	uint3 cellIdx = floor(_Particles[flatIdx]._position * _inv_KernelRadius);

	uint neighbor[27];
	uint i = 0;

	[unroll]
	for(i = 0; i < 27; ++i)
		neighbor[i] = 0;
	FindNeighborSpace(cellIdx, neighbor);

	[unroll]
	for(i = 0; i < 27; ++i)
		_NeighborSpace[flatIdx * 27 + i] = neighbor[i];
}

[numthreads(SPH_THREAD_NUM,SPH_THREAD_NUM,SPH_THREAD_NUM)]
void UpdatePressureDensity (uint groupIdx : SV_GroupIndex, uint3 groupId :SV_GroupID)
{
	uint flatIdx = groupIdx + groupId.x * SPH_THREAD_NUM_3D;
	if(flatIdx >= _ParticleNum)
		return;

	_Particles[flatIdx]._inv_density = 0;

	[unroll]
	for(uint i = 0; i < 27; ++i)
	{
		if(!_NeighborSpace[flatIdx * 27 + i])
			continue;

		uint neighborIdx1d = _Particles[flatIdx]._cellIdx1d +
								neighborOffset[i].x * _SphGridSize.y * _SphGridSize.z +
								neighborOffset[i].y * _SphGridSize.z + 
								neighborOffset[i].z;

		uint start = _ParticleCellNumPrefixSum[neighborIdx1d];
		uint end = _ParticleCellNumPrefixSum[neighborIdx1d + 1]; //last element? -> one more element
		for(uint n = start; n < end; ++n)
		{
			float3 relativePos = _Particles[flatIdx]._position - _Particles[n]._position;
			_Particles[flatIdx]._inv_density += _Particles[n]._mass * KernelPoly6(relativePos);
		}
	}

	if(_Particles[flatIdx]._inv_density <= _RestDensity)
	{
		_Particles[flatIdx]._pressure = 0;
		_Particles[flatIdx]._inv_density = 1 / _RestDensity;
	}
	else
	{
		_Particles[flatIdx]._pressure = _Stiffness * (_Particles[flatIdx]._inv_density - _RestDensity);
		_Particles[flatIdx]._inv_density = 1 / _Particles[flatIdx]._inv_density;
	}

}


[numthreads(SPH_THREAD_NUM,SPH_THREAD_NUM,SPH_THREAD_NUM)]
void UpdateParticleFluidForce (uint groupIdx : SV_GroupIndex, uint3 groupId :SV_GroupID)
{
	uint flatIdx = groupIdx + groupId.x * SPH_THREAD_NUM_3D;
	if(flatIdx >= _ParticleNum)
		return;

	_Particles[flatIdx]._forcePressure = float3(0, 0, 0);
	_Particles[flatIdx]._forceViscosity = float3(0, 0, 0);
	_Particles[flatIdx]._forceTension = float3(0, 0, 0);
	_Particles[flatIdx]._onSurface = 0;
	_Particles[flatIdx]._colorGradient = float3(0, 0, 0);
	float tension = 0;

	[unroll]
	for(uint i = 0; i < 27; ++i)
	{
		if(!_NeighborSpace[flatIdx * 27 + i])
			continue;

		uint neighborIdx1d = _Particles[flatIdx]._cellIdx1d +
								neighborOffset[i].x * _SphGridSize.y * _SphGridSize.z +
								neighborOffset[i].y * _SphGridSize.z + 
								neighborOffset[i].z;
			
		uint start = _ParticleCellNumPrefixSum[neighborIdx1d];
		uint end = _ParticleCellNumPrefixSum[neighborIdx1d + 1]; //last element? -> one more element
		for(uint n = start; n < end; ++n)
		{
			float3 relativePos = _Particles[flatIdx]._position - _Particles[n]._position;
			_Particles[flatIdx]._forcePressure += (-0.5) * _Particles[n]._mass * 
												(_Particles[flatIdx]._pressure + _Particles[n]._pressure) * 
												_Particles[n]._inv_density *
												GradKernelSpiky(relativePos);
			
			_Particles[flatIdx]._forceViscosity += _Particles[n]._mass *
												 (_Particles[n]._velocity - _Particles[flatIdx]._velocity) *
												 _Particles[n]._inv_density *
												 LaplacianKernelViscosity(relativePos);

			_Particles[flatIdx]._colorGradient += _Particles[n]._mass *  _Particles[n]._inv_density *
												GradKernelPoly6(relativePos);

			tension -= _Particles[n]._mass * _Particles[n]._inv_density * LaplacianKernelPoly6(relativePos);
		}	
	}

	_Particles[flatIdx]._forceViscosity *= _Viscosity;

	if(dot(_Particles[flatIdx]._colorGradient, _Particles[flatIdx]._colorGradient) > _SurfaceThreshold * _SurfaceThreshold)
	{
		_Particles[flatIdx]._onSurface = 1;
		_Particles[flatIdx]._forceTension = _TensionCoef * tension * normalize(_Particles[flatIdx]._colorGradient);
	}
}

[numthreads(SPH_THREAD_NUM,SPH_THREAD_NUM,SPH_THREAD_NUM)]
void AdvanceParticle (uint groupIdx : SV_GroupIndex, uint3 groupId :SV_GroupID)
{
	uint flatIdx = groupIdx + groupId.x * SPH_THREAD_NUM_3D;
	if(flatIdx >= _ParticleNum)
		return;

	float3 acc = (_Particles[flatIdx]._forcePressure + 
			_Particles[flatIdx]._forceViscosity + 
			_Particles[flatIdx]._forceTension) /
			_Particles[flatIdx]._mass + _ExternalAcc;
	

	_Particles[flatIdx]._position += _Particles[flatIdx]._velocity * _TimeStep;
	_Particles[flatIdx]._prevVelocity = _Particles[flatIdx]._velocity;
	_Particles[flatIdx]._velocity += acc * _TimeStep;
	_Particles[flatIdx]._midVelocity = 0.5 * (_Particles[flatIdx]._velocity + _Particles[flatIdx]._prevVelocity);
	
	//obstacles collision
	uint numObstacles = 0;
	uint stride;
	_Obstacles.GetDimensions(numObstacles, stride);
	for(uint i = 0; i < numObstacles; ++i)
	{
		if( _Obstacles[i]._active == 0)
			continue;

		float3 diff = _Particles[flatIdx]._position - _Obstacles[i]._center;
		float sqDist = dot(diff, diff);
		if(sqDist <= 0)
		{
			_Particles[flatIdx]._position = 
			float3(_Obstacles[i]._radius, 0, 0) + _Eps + _Obstacles[i]._center;
		}
		else if(sqDist < _Obstacles[i]._radius * _Obstacles[i]._radius)
		{
			float3 normal = diff / sqrt(sqDist);

			_Particles[flatIdx]._position = 
			normal * (_Obstacles[i]._radius + _Eps) + _Obstacles[i]._center;

			float3 veloNormal = dot(_Particles[flatIdx]._velocity, normal) * normal;
			_Particles[flatIdx]._velocity -= veloNormal;
			_Particles[flatIdx]._velocity += - veloNormal + 2 * dot(_Obstacles[i]._velocity, normal) * normal;
			
			_Particles[flatIdx]._midVelocity = 0.5 * (_Particles[flatIdx]._velocity + _Particles[flatIdx]._prevVelocity);
		}
	}
	//boundary collision
	ApplyGridBoundaryCondition(_Particles[flatIdx]);

}

[numthreads(SPH_THREAD_NUM,SPH_THREAD_NUM,SPH_THREAD_NUM)]
void InitParticle (uint groupIdx : SV_GroupIndex, uint3 groupId :SV_GroupID)
{
	uint flatIdx = groupIdx + groupId.x * SPH_THREAD_NUM_3D;
	if(flatIdx >= _ParticleNum)
		return;

	float3 acc = (_Particles[flatIdx]._forcePressure + 
		_Particles[flatIdx]._forceViscosity + 
		_Particles[flatIdx]._forceTension) /
		_Particles[flatIdx]._mass + _ExternalAcc;

	_Particles[flatIdx]._velocity += 0.5 * acc * _TimeStep;
}

